import struct

def calculate_crc_sop(data):

    poly = 0xEDB88320
    crc = 0xFFFFFFFF
    
    for byte in data:
        crc ^= byte
        
        for _ in range(32):
            mask = -(crc & 1)
            crc = (crc >> 1) ^ (poly & mask)
    
    return ~crc & 0xFFFFFFFF



# Define the structure in Python as per the C structure
# Assume that we use int32 for each element as per your C structure (int32_t)
continuousChargingTableData = [ 0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
                                24,     24,     24,     24,     24,     24,     24,     24,     24,     24,     20,
                                60,     60,     60,     60,     60,     60,     60,     60,     60,     60,     40,
                                100,    100,    100,    100,    100,    100,    100,    100,    100,    100,    40,
                                200,    200,    200,    200,    200,    200,    200,    200,    200,    150,    60,
                                200,    200,    200,    200,    200,    200,    200,    200,    200,    160,    160,
                                200,    200,    200,    200,    200,    200,    200,    200,    200,    160,    160,
                                160,    160,    160,    160,    160,    160,    160,    160,    160,    160,    60,
                                60,     60,     60,     60,     60,     60,     60,     60,     60,     60,     40,
                                0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0 ]


continuousDischargingTableData = [40,        60,         80,         100,        100,        100,        100,        100,        100,        100,        100,
                                60,        100,        120,        160,        160,        160,        160,        160,        160,        160,        160,
                                60,        100,        120,        160,        160,        160,        160,        160,        160,        160,        160,
                                60,        100,        120,        160,        160,        160,        160,        160,        160,        160,        160,
                                60,        100,        120,        160,        160,        160,        160,        160,        160,        160,        160,
                                100,       120,        150,        200,        200,        200,        200,        200,        200,        200,        200,
                                100,       120,        150,        200,        200,        200,        200,        200,        200,        200,        200,
                                100,       120,        150,        200,        200,        200,        200,        200,        200,        200,        200,
                                100,       120,        150,        200,        200,        200,        200,        200,        200,        200,        200,
                                100,       120,        150,        200,        200,        200,        200,        200,        200,        200,        200,
                                100,       120,        150,        200,        200,        200,        200,        200,        200,        200,        200,
                                100,       120,        150,        200,        200,        200,        200,        200,        200,        200,        200,
                                60,        100,        120,        160,        160,        160,        160,        160,        160,        160,        160,
                                20,        30,         40,         60,         60,         60,         60,         60,         60,         60,         60,
                                0,         0,          0,          0,          0,          0,          0,          0,          0,          0,          0]

instantaneousDischargingTableData = [40,     60,     80,     200,    200,    200,    200,    200,    200,    200,    200,
                                60,     100,    120,    240,    240,    240,    240,    240,    240,    240,    240,
                                60,     100,    200,    300,    300,    300,    300,    300,    300,    300,    300,
                                60,     100,    200,    300,    300,    300,    300,    300,    300,    300,    300,
                                60,     100,    200,    300,    300,    300,    300,    300,    300,    300,    300,
                                100,    200,    240,    300,    300,    300,    300,    300,    300,    300,    300,
                                200,    200,    240,    300,    300,    300,    300,    300,    300,    300,    300,
                                200,    200,    300,    300,    300,    300,    300,    300,    300,    300,    300,
                                200,    200,    300,    300,    300,    300,    300,    300,    300,    300,    300,
                                200,    200,    300,    300,    300,    300,    300,    300,    300,    300,    300,
                                200,    200,    300,    300,    300,    300,    300,    300,    300,    300,    300,
                                200,    200,    300,    300,    300,    300,    300,    300,    300,    300,    300,
                                200,    200,    300,    300,    300,    300,    300,    300,    300,    300,    300,
                                20,     60,     120,    240,    240,    240,    240,    240,    240,    240,    240,
                                0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0 ]

instantaneousChargingTableData = [0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
                                80,     80,     80,     80,     80,     80,     80,     80,     80,     80,     20,
                                160,    160,    160,    160,    160,    160,    160,    160,    160,    160,    40,
                                240,    240,    240,    240,    240,    240,    240,    240,    240,    240,    40,
                                300,    300,    300,    300,    300,    300,    300,    300,    300,    300,    60,
                                300,    300,    300,    300,    300,    300,    300,    300,    300,    300,    160,
                                300,    300,    300,    300,    300,    300,    300,    300,    300,    300,    160,
                                300,    300,    300,    300,    300,    300,    300,    300,    300,    300,    60,
                                240,    240,    240,    240,    240,    240,    240,    240,    240,    240,    40,
                                0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0 ]
socData = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
chargingTemperatureData = [0, 5, 10, 15, 20, 25, 45, 50, 55, 60]
dischargingTemperatureData = [-10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60]
chargingMaxElements = [10, 11]
dischargingMaxElements = [15, 11]

data = continuousChargingTableData + continuousDischargingTableData + instantaneousDischargingTableData + instantaneousChargingTableData +socData + chargingTemperatureData + dischargingTemperatureData + chargingMaxElements + dischargingMaxElements

# Pack the data
packed_data = struct.pack(f'{len(data)}h', *data)

# Calculate CRC over the data (not including the CRC itself)
crc = calculate_crc_sop(packed_data)
print(crc)
packed_data_with_crc = packed_data + struct.pack('I', crc)

# Write the packed data along with the CRC to a binary file
with open("battery_data.bin", "wb") as f:
    f.write(packed_data_with_crc)
